{"version":3,"sources":["MyBlock/index.js","MyBlock/tool.js","Editor/tools.js","Editor/index.js","App.js","reportWebVitals.js","index.js"],"names":["MyBlock","data","onDataChange","useState","text","author","color","values","setValue","useEffect","handleChange","evt","target","name","value","className","onChange","type","MyBlockTool","api","config","readOnly","this","undefined","CSS","wrapper","nodes","holder","rootNode","document","createElement","setAttribute","ReactDOM","render","newData","icon","title","tools","header","class","Header","placeholder","levels","list","List","underline","Underline","image","SimpleImage","delimiter","Delimiter","embed","Embed","myBlock","key","ReactEditor","isEditorReady","setIsEditorReady","window","localStorage","getItem","JSON","parse","blocks","getInitialData","editorRef","useRef","handleSave","console","log","stringify","setItem","autofocus","onReady","instanceRef","instance","current","onClick","save","then","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6ccb2140.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './index.css'\n\nconst MyBlock = ({data, onDataChange}) => {\n\n    const [values, setValue] = useState(data || {\n        text: '',\n        author: '',\n        color: '#000000',\n    })\n\n    useEffect(() => {\n        onDataChange(values)\n    }, [values])\n\n    const handleChange = (evt) => {\n        const {target} = evt\n        setValue({...values, [target.name]: target.value})\n    }\n\n    return (\n        <div className={'block'}>\n            <div className={'block__title'}>Custom block</div>\n            <div className={'block__form'}>\n                <input onChange={handleChange} value={values.text} name={'text'}/>\n                <input onChange={handleChange} value={values.author} name={'author'}/>\n                <input onChange={handleChange} value={values.color} name={'color'} type={'color'}/>\n            </div>\n        </div>\n    );\n};\n\nexport default MyBlock;","import { default as React } from 'react';\nimport ReactDOM from 'react-dom';\nimport MyBlock from \"./index\";\n\nexport default class MyBlockTool {\n\n    static get toolbox() {\n        return {\n            icon: `<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M19 15v4H5v-4h14m1-2H4c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zM7 18.5c-.82 0-1.5-.67-1.5-1.5s.68-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zM19 5v4H5V5h14m1-2H4c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1zM7 8.5c-.82 0-1.5-.67-1.5-1.5S6.18 5.5 7 5.5s1.5.68 1.5 1.5S7.83 8.5 7 8.5z\"/></svg>`,\n            title: 'MyBlock',\n        };\n    }\n\n    static get isReadOnlySupported() {\n        return true;\n    }\n\n    constructor({ data, config, api, readOnly }) {\n        this.api = api;\n        this.readOnly = readOnly;\n        this.data = data || undefined;\n\n        this.CSS = {\n            wrapper: 'walkthrough-timeline',\n        };\n\n        this.nodes = {\n            holder: null,\n        };\n    }\n\n    render() {\n        const rootNode = document.createElement('div');\n        rootNode.setAttribute('class', this.CSS.wrapper);\n        this.nodes.holder = rootNode;\n\n        const onDataChange = (newData) => {\n            this.data = {\n                ...newData\n            };\n        }\n\n        ReactDOM.render(\n            (\n                <MyBlock\n                    onDataChange={onDataChange}\n                    data={this.data} />\n            ),\n            rootNode);\n\n        return this.nodes.holder;\n    }\n\n    save() {\n        return this.data;\n    }\n}","import Embed from '@editorjs/embed'\nimport List from '@editorjs/list'\nimport Header from '@editorjs/header'\nimport Delimiter from '@editorjs/delimiter'\nimport SimpleImage from '@editorjs/simple-image'\nimport Underline from '@editorjs/underline'\nimport MyBlockTool from \"../MyBlock/tool\";\n\nexport const tools = {\n    header: {\n        class: Header,\n        config: {\n            placeholder: 'Enter a header',\n            levels: [1, 2, 3],\n        }\n    },\n    list: List,\n    underline: Underline,\n    image: SimpleImage,\n    delimiter: Delimiter,\n    embed: Embed,\n    myBlock: MyBlockTool,\n}","import React, {useRef, useState} from 'react';\nimport EditorJs from 'react-editor-js';\nimport {tools} from \"./tools\";\nimport './index.css'\n\nconst key = 'editor'\n\nconst getInitialData = () => {\n    const data = window.localStorage.getItem(key)\n    if (data) {\n        return (JSON.parse(data))\n    }\n    return {blocks: []}\n}\n\nconst ReactEditor = () => {\n    const [isEditorReady, setIsEditorReady] = useState(false)\n    const [data] = useState(getInitialData())\n    const editorRef=useRef()\n\n    const handleSave = (data) => {\n        console.log('SAVED', JSON.stringify(data, null, 2))\n        window.localStorage.setItem(key, JSON.stringify(data))\n    }\n\n    return (\n        <div>\n            <EditorJs autofocus={true} onReady={() => setIsEditorReady(true)} tools={tools} data={data} instanceRef={instance => editorRef.current = instance}/>\n            {isEditorReady &&\n            <button className={'button'} onClick={() => editorRef.current?.save().then(handleSave)}>Сохранить</button>}\n        </div>\n    );\n};\n\nexport default ReactEditor;","import './App.css';\nimport ReactEditor from \"./Editor\";\n\nfunction App() {\n  return (\n    <div className={'app'}>\n      <ReactEditor/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}